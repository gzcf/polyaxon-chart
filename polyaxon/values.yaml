namespace: "polyaxon"

rbac:
  enabled: true
ingress:
  enabled: true
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
    ingress.kubernetes.io/rewrite-target: /
    ingress.kubernetes.io/add-base-url: "true"
    kubernetes.io/ingress.class: polyaxon-ingress
# If you enable ingress, please set this value to ClusterIP or NodePort
# Otherwise you should set it to LoadBalancer
serviceType: ClusterIP

# Initial admin user to create
user:
  username: "root"
  emailFrom: <root@polyaxon.local>
  email: "root@polyaxon.local"
  password: "rootpassword"

dirs:
  nvidia:
    lib: ""  # e.g. "/usr/lib/nvidia-384"
    bin: ""  # e.g. "/usr/lib/nvidia-384/bin"
    libcuda: ""  # e.g. "/usr/lib/x86_64-linux-gnu/libcuda.so.1"
  docker: "/var/run/docker.sock"

# This is where we mount nvidia on hosts
mountPaths:
  nvidia:
    lib: ""
    bin: ""
    libcuda: ""
  docker: "/var/run/docker.sock"

persistence:
  data:
    existingClaim:
    accessMode: ReadWriteMany
    size: 10Gi
    mountPath: "/data"
    subPath: ""
  outputs:
    existingClaim:
    accessMode: ReadWriteMany
    size: 5Gi
    mountPath: "/outputs"
    subPath: ""
  logs:
    existingClaim:
    accessMode: ReadWriteMany
    size: 5Gi
    mountPath: "/logs"
    subPath: ""
  repos:
    enabled: false
    name: "polyaxon-pvc-repos"
    storageClass:
    existingClaim:
    accessMode: ReadWriteOnce
    size: 5Gi
    mountPath: "/repos"
    subPath: ""
  upload:
    enabled: false
    name: "polyaxon-pvc-upload"
    storageClass:
    existingClaim:
    accessMode: ReadWriteOnce
    size: 10Gi
    mountPath: "/tmp/plx"
    subPath: ""
  extra: []
# e.g.
  # extra:
  #   - mountPath: "/storage/1"
  #     hostPath: "/path/to/storage"
  #   - mountPath: "/storage/2"
  #     existingClaim: "storage-2-pvc"

auth:
  ldap:
    enabled: false
    serverUri:
    globalOptions:
    connectionOptions:
    bindDN:
    bindPassword:
    userSearchBaseDN:
    userSearchFilterStr:
    userDNTemplate:
    startTLS: false
    userAttrMap:
    groupSearchBaseDN:
    groupSearchGroupType:
    requireGroup:
    denyGroup:


nodeSelectors:
  core:
  experiments:

tolerations:
  core:
  resourcesDaemon:

affinity:
  podAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: type
              operator: In
              values:
              - "polyaxon-core"
          topologyKey: "kubernetes.io/hostname"

passwordLenght: 8

api:
  image: polyaxon/polyaxon-api
  imageTag: 0.0.6
  imagePullPolicy: IfNotPresent
  replicas: 1
  resources:
    limits:
      cpu: 500m
      memory: 300Mi
    requests:
      cpu: 128m
      memory: 300Mi

  service:
    name: api
    externalPort: 80
    internalPort: 80
    nodePort: 31811

apiEvents:
  image: polyaxon/polyaxon-api-events
  imageTag: 0.0.6
  imagePullPolicy: IfNotPresent
  replicas: 1
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

  service:  # service type is the same as api
    name: api-events
    externalPort: 1337
    internalPort: 1337
    nodePort: 31812

workers:
  scheduler:
    image: polyaxon/polyaxon-workers
    imageTag: 0.0.6
    imagePullPolicy: IfNotPresent
    replicas: 1
    concurrency: 2
    resources:
      limits:
        cpu: 350m
        memory: 350Mi
      requests:
        cpu: 150m
        memory: 200Mi

  events:
    image: polyaxon/polyaxon-workers
    imageTag: 0.0.6
    imagePullPolicy: IfNotPresent
    replicas: 1
    concurrency: 2
    resources:
      limits:
        cpu: 200m
        memory: 300Mi
      requests:
        cpu: 130m
        memory: 200Mi

  crons:
    image: polyaxon/polyaxon-workers
    imageTag: 0.0.6
    imagePullPolicy: IfNotPresent
    replicas: 1
    concurrency: 2
    resources:
      limits:
        cpu: 100m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 100Mi

beat:
  image: polyaxon/polyaxon-beat
  imageTag: 0.0.6
  imagePullPolicy: IfNotPresent
  replicas: 1
  resources:
    limits:
      cpu: 50m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 128Mi

events:
  namespace:
    enabled: true
    image: polyaxon/polyaxon-monitor-namespace
    imageTag: 0.0.6
    imagePullPolicy: IfNotPresent
    replicas: 1
    resources:
      limits:
        cpu: 120m
        memory: 200Mi
      requests:
        cpu: 80m
        memory: 128Mi
    persists: false
    logSleepInterval: 1

  statuses:
    enabled: true
    image: polyaxon/polyaxon-monitor-statuses
    imageTag: 0.0.6
    imagePullPolicy: IfNotPresent
    replicas: 1
    resources:
      limits:
        cpu: 120m
        memory: 200Mi
      requests:
        cpu: 80m
        memory: 128Mi
    persists: false
    logSleepInterval: 1

resourcesDaemon:
  enabled: true
  image: polyaxon/polyaxon-monitor-resources
  imageTag: 0.0.6
  imagePullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 150m
      memory: 200Mi
    requests:
      cpu: 150m
      memory: 200Mi
  persists: false
  logSleepInterval: 1

sidecar:
  image: polyaxon/polyaxon-sidecar
  imageTag: 0.0.6

job:
  image: polyaxon/polyaxon-lib
  imageTag: 0.0.6

hooks:
  image: polyaxon/polyaxon-manage
  imageTag: 0.0.6
  imagePullPolicy: IfNotPresent

postgresql:
  imageTag: 9.6.1
  postgresUser: polyaxon
  postgresPassword: polyaxon
  postgresDatabase: polyaxon
  persistence:
    enabled: false
    size: 2Gi
  affinity:
    podAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: type
                operator: In
                values:
                - "polyaxon-core"
            topologyKey: "kubernetes.io/hostname"

redis:
  image: redis
  imageTag: 4.0.2
  usePassword: false
  persistence:
    enabled: false
    accessMode: ReadWriteOnce
    size: 8Gi
  affinity:
    podAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: type
                operator: In
                values:
                - "polyaxon-core"
            topologyKey: "kubernetes.io/hostname"

rabbitmq:
  imageTag: "3.6.12-management"
  image: "rabbitmq"
  imagePullPolicy: IfNotPresent
  rabbitmqUsername: polyaxon
  persistence:
    enabled: false
  resources:
    requests:
      memory: 256Mi
      cpu: 300m
  affinity:
    podAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: type
                operator: In
                values:
                - "polyaxon-core"
            topologyKey: "kubernetes.io/hostname"

docker-registry:
  service:
    type: NodePort
    nodePort: 31813
  resources:
    requests:
      cpu: 300m
      memory: 312Mi
  persistence:
    enabled: false
  affinity:
    podAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: type
                operator: In
                values:
                - "polyaxon-core"
            topologyKey: "kubernetes.io/hostname"

debug: 0
celery:
  always_eager: false
  celeryd_prefetch_multiplier: 4

types:
  core: "polyaxon-core"
  experiment: "polyaxon-experiment"

roles:
  api: "polyaxon-api"
  log: "polyaxon-logs"
  worker: "polyaxon-workers"
  dashboard: "polyaxon-dashboard"

apps:
  tensorboard: "polyaxon-tensorboard"
  notebook: "polyaxon-notebook"

k8s: {}

email:
  host: smtp
  port: 25
  use_tls: false

intervals:  # in seconds
  experiments_scheduler: 60
  experiments_sync: 60
  clusters_update_system_info: 150
  clusters_update_system_nodes: 150

queues:
  apiExperiments: 'api.experiments'
  apiExperimentsSync: 'api.sync_experiments'
  apiClusters: 'api.clusters'
  eventsNamespace: 'events.namespace'
  eventsResources: 'events.resources'
  eventsStatuses: 'events.statuses'
  logsSidecars: 'logs.sidecars'
  streamEventsNamespace: 'stream.events.namespace'
  streamEventsResources: 'stream.events.resources'
  streamEventsStatuses: 'stream.events.statuses'
  streamLogsSidecars: 'stream.logs.sidecars'

routingKeys:
  eventsStatuses: events.statuses
  eventsNamespace: events.namespace
  eventsResources: events.resources
  logsSidecars: logs.sidecars

exchanges:
  internal: 'internal'

versions:
  cli:
    min: 0.0.3
    latest: 0.0.6
  platform:
    min: 0.0.3
    latest: 0.0.6
  lib:
    min: 0.0.2
    latest: 0.0.5
